// Mocks generated by Mockito 5.4.0 from annotations
// in movies_app/test/features/movies/data/repositories/movies_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_app/core/network/network_info.dart' as _i7;
import 'package:movies_app/features/movies/data/data_sources/movies_local_data_source.dart'
    as _i2;
import 'package:movies_app/features/movies/data/data_sources/movies_remote_data_source.dart'
    as _i6;
import 'package:movies_app/features/movies/data/models/genre_model.dart' as _i5;
import 'package:movies_app/features/movies/data/models/movie_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MoviesLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesLocalDataSource extends _i1.Mock
    implements _i2.MoviesLocalDataSource {
  @override
  _i3.Future<List<_i4.MovieModel>> getLastMovies() => (super.noSuchMethod(
        Invocation.method(
          #getLastMovies,
          [],
        ),
        returnValue: _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
      ) as _i3.Future<List<_i4.MovieModel>>);
  @override
  _i3.Future<List<_i5.GenreModel>> getLastGenres() => (super.noSuchMethod(
        Invocation.method(
          #getLastGenres,
          [],
        ),
        returnValue: _i3.Future<List<_i5.GenreModel>>.value(<_i5.GenreModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.GenreModel>>.value(<_i5.GenreModel>[]),
      ) as _i3.Future<List<_i5.GenreModel>>);
  @override
  _i3.Future<void> cacheMovies(List<_i4.MovieModel>? moviesToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheMovies,
          [moviesToCache],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> cacheGenres(List<_i5.GenreModel>? genresToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheGenres,
          [genresToCache],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [MoviesRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRemoteDataSource extends _i1.Mock
    implements _i6.MoviesRemoteDataSource {
  @override
  _i3.Future<List<_i4.MovieModel>> getPopularMovies() => (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue: _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
      ) as _i3.Future<List<_i4.MovieModel>>);
  @override
  _i3.Future<List<_i5.GenreModel>> getMovieGenres() => (super.noSuchMethod(
        Invocation.method(
          #getMovieGenres,
          [],
        ),
        returnValue: _i3.Future<List<_i5.GenreModel>>.value(<_i5.GenreModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.GenreModel>>.value(<_i5.GenreModel>[]),
      ) as _i3.Future<List<_i5.GenreModel>>);
  @override
  _i3.Future<List<_i4.MovieModel>> getMoviesByGenre(int? genreId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviesByGenre,
          [genreId],
        ),
        returnValue: _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
      ) as _i3.Future<List<_i4.MovieModel>>);
  @override
  _i3.Future<List<_i4.MovieModel>> getMoviesByTitle(String? title) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviesByTitle,
          [title],
        ),
        returnValue: _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
      ) as _i3.Future<List<_i4.MovieModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
