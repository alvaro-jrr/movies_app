// Mocks generated by Mockito 5.4.0 from annotations
// in movies_app/test/features/movies/presentation/bloc/movies_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_app/core/error/failures.dart' as _i6;
import 'package:movies_app/core/use_cases/use_case.dart' as _i8;
import 'package:movies_app/features/movies/domain/entities/genre_response.dart'
    as _i10;
import 'package:movies_app/features/movies/domain/entities/movie_response.dart'
    as _i7;
import 'package:movies_app/features/movies/domain/repositories/movies_repository.dart'
    as _i2;
import 'package:movies_app/features/movies/domain/use_cases/get_movie_genres.dart'
    as _i9;
import 'package:movies_app/features/movies/domain/use_cases/get_movies_by_genre.dart'
    as _i11;
import 'package:movies_app/features/movies/domain/use_cases/get_movies_by_title.dart'
    as _i12;
import 'package:movies_app/features/movies/domain/use_cases/get_popular_movies.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMoviesRepository_0 extends _i1.SmartFake
    implements _i2.MoviesRepository {
  _FakeMoviesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i4.GetPopularMovies {
  @override
  _i2.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MoviesRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>>.value(
                _FakeEither_1<_i6.Failure, _i7.MovieResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>>.value(
                _FakeEither_1<_i6.Failure, _i7.MovieResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>>);
}

/// A class which mocks [GetMovieGenres].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieGenres extends _i1.Mock implements _i9.GetMovieGenres {
  @override
  _i2.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MoviesRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.GenreResponse>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i10.GenreResponse>>.value(
                _FakeEither_1<_i6.Failure, _i10.GenreResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i10.GenreResponse>>.value(
                _FakeEither_1<_i6.Failure, _i10.GenreResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i10.GenreResponse>>);
}

/// A class which mocks [GetMoviesByGenre].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMoviesByGenre extends _i1.Mock implements _i11.GetMoviesByGenre {
  @override
  _i2.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MoviesRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>> call(
          _i11.GetMoviesByGenreParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>>.value(
                _FakeEither_1<_i6.Failure, _i7.MovieResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>>.value(
                _FakeEither_1<_i6.Failure, _i7.MovieResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>>);
}

/// A class which mocks [GetMoviesByTitle].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMoviesByTitle extends _i1.Mock implements _i12.GetMoviesByTitle {
  @override
  _i2.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MoviesRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>> call(
          _i12.GetMoviesByTitleParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>>.value(
                _FakeEither_1<_i6.Failure, _i7.MovieResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>>.value(
                _FakeEither_1<_i6.Failure, _i7.MovieResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.MovieResponse>>);
}
